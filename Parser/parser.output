Terminals unused in grammar

   ERROR


Grammatica

    0 $accept: program $end

    1 program: module-decl

    2 @1: %empty

    3 @2: %empty

    4 module-decl: MODULE ID @1 '(' opt-param-list ')' ':' TYPE @2 opt-var-sect opt-const-sect opt-module-list module-body

    5 opt-param-list: param-list
    6               | %empty

    7 param-list: param-decl ',' param-list
    8           | param-decl

    9 @3: %empty

   10 param-decl: ID @3 ':' TYPE

   11 opt-var-sect: VAR decl-list
   12             | %empty

   13 decl-list: decl ';' decl-list
   14          | decl ';'

   15 decl: id-list ':' TYPE

   16 @4: %empty

   17 id-list: ID @4 ',' id-list
   18        | ID

   19 opt-const-sect: CONST const-list
   20               | %empty

   21 const-list: const-decl const-list
   22           | const-decl

   23 const-decl: decl '=' expr ';'

   24 opt-module-list: module-decl opt-module-list
   25                | %empty

   26 @5: %empty

   27 module-body: START ID @5 stat-list END ID

   28 stat-list: stat ';' stat-list
   29          | stat ';'

   30 stat: assign-stat
   31     | if-stat
   32     | while-stat
   33     | return-stat
   34     | read-stat
   35     | write-stat
   36     | module-call

   37 @6: %empty

   38 assign-stat: ID @6 '=' expr

   39 if-stat: IF expr THEN stat-list opt-elsif-stat-list opt-else-stat END

   40 opt-elsif-stat-list: ELSIF expr THEN stat-list opt-elsif-stat-list
   41                    | %empty

   42 opt-else-stat: ELSE stat-list
   43              | %empty

   44 while-stat: WHILE expr DO stat-list END

   45 return-stat: RETURN opt-expr

   46 opt-expr: expr
   47         | %empty

   48 read-stat: READ '(' id-list ')'

   49 write-stat: WRITE '(' expr-list ')'

   50 expr-list: expr ',' expr-list
   51          | expr

   52 expr: expr bool-op bool-term
   53     | bool-term

   54 bool-op: AND
   55        | OR

   56 bool-term: rel-term rel-op rel-term
   57          | rel-term

   58 rel-op: EQ
   59       | NEQ
   60       | LT
   61       | LE
   62       | GT
   63       | GE

   64 rel-term: rel-term low-bin-op low-term
   65         | low-term

   66 low-bin-op: PLUS
   67           | MINUS

   68 low-term: low-term high-bin-op factor
   69         | factor

   70 high-bin-op: MULT
   71            | DIV

   72 factor: unary-op factor
   73       | '(' expr ')'
   74       | ID
   75       | constant
   76       | module-call
   77       | cond-expr

   78 @7: %empty

   79 factor: TYPE @7 '(' expr ')'

   80 unary-op: MINUS
   81         | NOT

   82 constant: CHARCONST
   83         | INTCONST
   84         | REALCONST
   85         | STRCONST
   86         | BOOLCONST

   87 @8: %empty

   88 module-call: ID @8 '(' opt-expr-list ')'

   89 opt-expr-list: expr-list
   90              | %empty

   91 cond-expr: IF expr THEN expr opt-elsif-expr-list ELSE expr END

   92 opt-elsif-expr-list: ELSIF expr THEN expr opt-elsif-expr-list
   93                    | %empty


Simboli terminali e regole in cui appaiono

$end (0) 0
'(' (40) 4 48 49 73 79 88
')' (41) 4 48 49 73 79 88
',' (44) 7 17 50
':' (58) 4 10 15
';' (59) 13 14 23 28 29
'=' (61) 23 38
error (256)
MODULE (258) 4
ID (259) 4 10 17 18 27 38 74 88
TYPE (260) 4 10 15 79
VAR (261) 11
CONST (262) 19
START (263) 27
END (264) 27 39 44 91
IF (265) 39 91
THEN (266) 39 40 91 92
ELSIF (267) 40 92
ELSE (268) 42 91
WHILE (269) 44
DO (270) 44
ERROR (271)
PLUS (272) 66
MINUS (273) 67 80
MULT (274) 70
DIV (275) 71
RETURN (276) 45
READ (277) 48
WRITE (278) 49
AND (279) 54
OR (280) 55
NOT (281) 81
EQ (282) 58
NEQ (283) 59
GE (284) 63
GT (285) 62
LE (286) 61
LT (287) 60
INTCONST (288) 83
REALCONST (289) 84
CHARCONST (290) 82
STRCONST (291) 85
BOOLCONST (292) 86


Simboli nonterminali e regole in cui appaiono

$accept (44)
    nel primo membro: 0
program (45)
    nel primo membro: 1, nel secondo membro: 0
module-decl (46)
    nel primo membro: 4, nel secondo membro: 1 24
@1 (47)
    nel primo membro: 2, nel secondo membro: 4
@2 (48)
    nel primo membro: 3, nel secondo membro: 4
opt-param-list (49)
    nel primo membro: 5 6, nel secondo membro: 4
param-list (50)
    nel primo membro: 7 8, nel secondo membro: 5 7
param-decl (51)
    nel primo membro: 10, nel secondo membro: 7 8
@3 (52)
    nel primo membro: 9, nel secondo membro: 10
opt-var-sect (53)
    nel primo membro: 11 12, nel secondo membro: 4
decl-list (54)
    nel primo membro: 13 14, nel secondo membro: 11 13
decl (55)
    nel primo membro: 15, nel secondo membro: 13 14 23
id-list (56)
    nel primo membro: 17 18, nel secondo membro: 15 17 48
@4 (57)
    nel primo membro: 16, nel secondo membro: 17
opt-const-sect (58)
    nel primo membro: 19 20, nel secondo membro: 4
const-list (59)
    nel primo membro: 21 22, nel secondo membro: 19 21
const-decl (60)
    nel primo membro: 23, nel secondo membro: 21 22
opt-module-list (61)
    nel primo membro: 24 25, nel secondo membro: 4 24
module-body (62)
    nel primo membro: 27, nel secondo membro: 4
@5 (63)
    nel primo membro: 26, nel secondo membro: 27
stat-list (64)
    nel primo membro: 28 29, nel secondo membro: 27 28 39 40 42 44
stat (65)
    nel primo membro: 30 31 32 33 34 35 36, nel secondo membro: 28
    29
assign-stat (66)
    nel primo membro: 38, nel secondo membro: 30
@6 (67)
    nel primo membro: 37, nel secondo membro: 38
if-stat (68)
    nel primo membro: 39, nel secondo membro: 31
opt-elsif-stat-list (69)
    nel primo membro: 40 41, nel secondo membro: 39 40
opt-else-stat (70)
    nel primo membro: 42 43, nel secondo membro: 39
while-stat (71)
    nel primo membro: 44, nel secondo membro: 32
return-stat (72)
    nel primo membro: 45, nel secondo membro: 33
opt-expr (73)
    nel primo membro: 46 47, nel secondo membro: 45
read-stat (74)
    nel primo membro: 48, nel secondo membro: 34
write-stat (75)
    nel primo membro: 49, nel secondo membro: 35
expr-list (76)
    nel primo membro: 50 51, nel secondo membro: 49 50 89
expr (77)
    nel primo membro: 52 53, nel secondo membro: 23 38 39 40 44 46
    50 51 52 73 79 91 92
bool-op (78)
    nel primo membro: 54 55, nel secondo membro: 52
bool-term (79)
    nel primo membro: 56 57, nel secondo membro: 52 53
rel-op (80)
    nel primo membro: 58 59 60 61 62 63, nel secondo membro: 56
rel-term (81)
    nel primo membro: 64 65, nel secondo membro: 56 57 64
low-bin-op (82)
    nel primo membro: 66 67, nel secondo membro: 64
low-term (83)
    nel primo membro: 68 69, nel secondo membro: 64 65 68
high-bin-op (84)
    nel primo membro: 70 71, nel secondo membro: 68
factor (85)
    nel primo membro: 72 73 74 75 76 77 79, nel secondo membro: 68
    69 72
@7 (86)
    nel primo membro: 78, nel secondo membro: 79
unary-op (87)
    nel primo membro: 80 81, nel secondo membro: 72
constant (88)
    nel primo membro: 82 83 84 85 86, nel secondo membro: 75
module-call (89)
    nel primo membro: 88, nel secondo membro: 36 76
@8 (90)
    nel primo membro: 87, nel secondo membro: 88
opt-expr-list (91)
    nel primo membro: 89 90, nel secondo membro: 88
cond-expr (92)
    nel primo membro: 91, nel secondo membro: 77
opt-elsif-expr-list (93)
    nel primo membro: 92 93, nel secondo membro: 91 92


Stato 0

    0 $accept: . program $end

    MODULE  shift e prosecuzione allo stato 1

    program      prosecuzione allo stato 2
    module-decl  prosecuzione allo stato 3


Stato 1

    4 module-decl: MODULE . ID @1 '(' opt-param-list ')' ':' TYPE @2 opt-var-sect opt-const-sect opt-module-list module-body

    ID  shift e prosecuzione allo stato 4


Stato 2

    0 $accept: program . $end

    $end  shift e prosecuzione allo stato 5


Stato 3

    1 program: module-decl .

    $default  riduzione con la regola 1 (program)


Stato 4

    4 module-decl: MODULE ID . @1 '(' opt-param-list ')' ':' TYPE @2 opt-var-sect opt-const-sect opt-module-list module-body

    $default  riduzione con la regola 2 (@1)

    @1  prosecuzione allo stato 6


Stato 5

    0 $accept: program $end .

    $default  accetta


Stato 6

    4 module-decl: MODULE ID @1 . '(' opt-param-list ')' ':' TYPE @2 opt-var-sect opt-const-sect opt-module-list module-body

    '('  shift e prosecuzione allo stato 7


Stato 7

    4 module-decl: MODULE ID @1 '(' . opt-param-list ')' ':' TYPE @2 opt-var-sect opt-const-sect opt-module-list module-body

    ID  shift e prosecuzione allo stato 8

    $default  riduzione con la regola 6 (opt-param-list)

    opt-param-list  prosecuzione allo stato 9
    param-list      prosecuzione allo stato 10
    param-decl      prosecuzione allo stato 11


Stato 8

   10 param-decl: ID . @3 ':' TYPE

    $default  riduzione con la regola 9 (@3)

    @3  prosecuzione allo stato 12


Stato 9

    4 module-decl: MODULE ID @1 '(' opt-param-list . ')' ':' TYPE @2 opt-var-sect opt-const-sect opt-module-list module-body

    ')'  shift e prosecuzione allo stato 13


Stato 10

    5 opt-param-list: param-list .

    $default  riduzione con la regola 5 (opt-param-list)


Stato 11

    7 param-list: param-decl . ',' param-list
    8           | param-decl .

    ','  shift e prosecuzione allo stato 14

    $default  riduzione con la regola 8 (param-list)


Stato 12

   10 param-decl: ID @3 . ':' TYPE

    ':'  shift e prosecuzione allo stato 15


Stato 13

    4 module-decl: MODULE ID @1 '(' opt-param-list ')' . ':' TYPE @2 opt-var-sect opt-const-sect opt-module-list module-body

    ':'  shift e prosecuzione allo stato 16


Stato 14

    7 param-list: param-decl ',' . param-list

    ID  shift e prosecuzione allo stato 8

    param-list  prosecuzione allo stato 17
    param-decl  prosecuzione allo stato 11


Stato 15

   10 param-decl: ID @3 ':' . TYPE

    TYPE  shift e prosecuzione allo stato 18


Stato 16

    4 module-decl: MODULE ID @1 '(' opt-param-list ')' ':' . TYPE @2 opt-var-sect opt-const-sect opt-module-list module-body

    TYPE  shift e prosecuzione allo stato 19


Stato 17

    7 param-list: param-decl ',' param-list .

    $default  riduzione con la regola 7 (param-list)


Stato 18

   10 param-decl: ID @3 ':' TYPE .

    $default  riduzione con la regola 10 (param-decl)


Stato 19

    4 module-decl: MODULE ID @1 '(' opt-param-list ')' ':' TYPE . @2 opt-var-sect opt-const-sect opt-module-list module-body

    $default  riduzione con la regola 3 (@2)

    @2  prosecuzione allo stato 20


Stato 20

    4 module-decl: MODULE ID @1 '(' opt-param-list ')' ':' TYPE @2 . opt-var-sect opt-const-sect opt-module-list module-body

    VAR  shift e prosecuzione allo stato 21

    $default  riduzione con la regola 12 (opt-var-sect)

    opt-var-sect  prosecuzione allo stato 22


Stato 21

   11 opt-var-sect: VAR . decl-list

    ID  shift e prosecuzione allo stato 23

    decl-list  prosecuzione allo stato 24
    decl       prosecuzione allo stato 25
    id-list    prosecuzione allo stato 26


Stato 22

    4 module-decl: MODULE ID @1 '(' opt-param-list ')' ':' TYPE @2 opt-var-sect . opt-const-sect opt-module-list module-body

    CONST  shift e prosecuzione allo stato 27

    $default  riduzione con la regola 20 (opt-const-sect)

    opt-const-sect  prosecuzione allo stato 28


Stato 23

   17 id-list: ID . @4 ',' id-list
   18        | ID .

    ','       riduzione con la regola 16 (@4)
    $default  riduzione con la regola 18 (id-list)

    @4  prosecuzione allo stato 29


Stato 24

   11 opt-var-sect: VAR decl-list .

    $default  riduzione con la regola 11 (opt-var-sect)


Stato 25

   13 decl-list: decl . ';' decl-list
   14          | decl . ';'

    ';'  shift e prosecuzione allo stato 30


Stato 26

   15 decl: id-list . ':' TYPE

    ':'  shift e prosecuzione allo stato 31


Stato 27

   19 opt-const-sect: CONST . const-list

    ID  shift e prosecuzione allo stato 23

    decl        prosecuzione allo stato 32
    id-list     prosecuzione allo stato 26
    const-list  prosecuzione allo stato 33
    const-decl  prosecuzione allo stato 34


Stato 28

    4 module-decl: MODULE ID @1 '(' opt-param-list ')' ':' TYPE @2 opt-var-sect opt-const-sect . opt-module-list module-body

    MODULE  shift e prosecuzione allo stato 1

    $default  riduzione con la regola 25 (opt-module-list)

    module-decl      prosecuzione allo stato 35
    opt-module-list  prosecuzione allo stato 36


Stato 29

   17 id-list: ID @4 . ',' id-list

    ','  shift e prosecuzione allo stato 37


Stato 30

   13 decl-list: decl ';' . decl-list
   14          | decl ';' .

    ID  shift e prosecuzione allo stato 23

    $default  riduzione con la regola 14 (decl-list)

    decl-list  prosecuzione allo stato 38
    decl       prosecuzione allo stato 25
    id-list    prosecuzione allo stato 26


Stato 31

   15 decl: id-list ':' . TYPE

    TYPE  shift e prosecuzione allo stato 39


Stato 32

   23 const-decl: decl . '=' expr ';'

    '='  shift e prosecuzione allo stato 40


Stato 33

   19 opt-const-sect: CONST const-list .

    $default  riduzione con la regola 19 (opt-const-sect)


Stato 34

   21 const-list: const-decl . const-list
   22           | const-decl .

    ID  shift e prosecuzione allo stato 23

    $default  riduzione con la regola 22 (const-list)

    decl        prosecuzione allo stato 32
    id-list     prosecuzione allo stato 26
    const-list  prosecuzione allo stato 41
    const-decl  prosecuzione allo stato 34


Stato 35

   24 opt-module-list: module-decl . opt-module-list

    MODULE  shift e prosecuzione allo stato 1

    $default  riduzione con la regola 25 (opt-module-list)

    module-decl      prosecuzione allo stato 35
    opt-module-list  prosecuzione allo stato 42


Stato 36

    4 module-decl: MODULE ID @1 '(' opt-param-list ')' ':' TYPE @2 opt-var-sect opt-const-sect opt-module-list . module-body

    START  shift e prosecuzione allo stato 43

    module-body  prosecuzione allo stato 44


Stato 37

   17 id-list: ID @4 ',' . id-list

    ID  shift e prosecuzione allo stato 23

    id-list  prosecuzione allo stato 45


Stato 38

   13 decl-list: decl ';' decl-list .

    $default  riduzione con la regola 13 (decl-list)


Stato 39

   15 decl: id-list ':' TYPE .

    $default  riduzione con la regola 15 (decl)


Stato 40

   23 const-decl: decl '=' . expr ';'

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 57
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 41

   21 const-list: const-decl const-list .

    $default  riduzione con la regola 21 (const-list)


Stato 42

   24 opt-module-list: module-decl opt-module-list .

    $default  riduzione con la regola 24 (opt-module-list)


Stato 43

   27 module-body: START . ID @5 stat-list END ID

    ID  shift e prosecuzione allo stato 66


Stato 44

    4 module-decl: MODULE ID @1 '(' opt-param-list ')' ':' TYPE @2 opt-var-sect opt-const-sect opt-module-list module-body .

    $default  riduzione con la regola 4 (module-decl)


Stato 45

   17 id-list: ID @4 ',' id-list .

    $default  riduzione con la regola 17 (id-list)


Stato 46

   74 factor: ID .
   88 module-call: ID . @8 '(' opt-expr-list ')'

    '('       riduzione con la regola 87 (@8)
    $default  riduzione con la regola 74 (factor)

    @8  prosecuzione allo stato 67


Stato 47

   79 factor: TYPE . @7 '(' expr ')'

    $default  riduzione con la regola 78 (@7)

    @7  prosecuzione allo stato 68


Stato 48

   91 cond-expr: IF . expr THEN expr opt-elsif-expr-list ELSE expr END

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 69
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 49

   80 unary-op: MINUS .

    $default  riduzione con la regola 80 (unary-op)


Stato 50

   81 unary-op: NOT .

    $default  riduzione con la regola 81 (unary-op)


Stato 51

   83 constant: INTCONST .

    $default  riduzione con la regola 83 (constant)


Stato 52

   84 constant: REALCONST .

    $default  riduzione con la regola 84 (constant)


Stato 53

   82 constant: CHARCONST .

    $default  riduzione con la regola 82 (constant)


Stato 54

   85 constant: STRCONST .

    $default  riduzione con la regola 85 (constant)


Stato 55

   86 constant: BOOLCONST .

    $default  riduzione con la regola 86 (constant)


Stato 56

   73 factor: '(' . expr ')'

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 70
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 57

   23 const-decl: decl '=' expr . ';'
   52 expr: expr . bool-op bool-term

    AND  shift e prosecuzione allo stato 71
    OR   shift e prosecuzione allo stato 72
    ';'  shift e prosecuzione allo stato 73

    bool-op  prosecuzione allo stato 74


Stato 58

   53 expr: bool-term .

    $default  riduzione con la regola 53 (expr)


Stato 59

   56 bool-term: rel-term . rel-op rel-term
   57          | rel-term .
   64 rel-term: rel-term . low-bin-op low-term

    PLUS   shift e prosecuzione allo stato 75
    MINUS  shift e prosecuzione allo stato 76
    EQ     shift e prosecuzione allo stato 77
    NEQ    shift e prosecuzione allo stato 78
    GE     shift e prosecuzione allo stato 79
    GT     shift e prosecuzione allo stato 80
    LE     shift e prosecuzione allo stato 81
    LT     shift e prosecuzione allo stato 82

    $default  riduzione con la regola 57 (bool-term)

    rel-op      prosecuzione allo stato 83
    low-bin-op  prosecuzione allo stato 84


Stato 60

   65 rel-term: low-term .
   68 low-term: low-term . high-bin-op factor

    MULT  shift e prosecuzione allo stato 85
    DIV   shift e prosecuzione allo stato 86

    $default  riduzione con la regola 65 (rel-term)

    high-bin-op  prosecuzione allo stato 87


Stato 61

   69 low-term: factor .

    $default  riduzione con la regola 69 (low-term)


Stato 62

   72 factor: unary-op . factor

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    factor       prosecuzione allo stato 88
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 63

   75 factor: constant .

    $default  riduzione con la regola 75 (factor)


Stato 64

   76 factor: module-call .

    $default  riduzione con la regola 76 (factor)


Stato 65

   77 factor: cond-expr .

    $default  riduzione con la regola 77 (factor)


Stato 66

   27 module-body: START ID . @5 stat-list END ID

    $default  riduzione con la regola 26 (@5)

    @5  prosecuzione allo stato 89


Stato 67

   88 module-call: ID @8 . '(' opt-expr-list ')'

    '('  shift e prosecuzione allo stato 90


Stato 68

   79 factor: TYPE @7 . '(' expr ')'

    '('  shift e prosecuzione allo stato 91


Stato 69

   52 expr: expr . bool-op bool-term
   91 cond-expr: IF expr . THEN expr opt-elsif-expr-list ELSE expr END

    THEN  shift e prosecuzione allo stato 92
    AND   shift e prosecuzione allo stato 71
    OR    shift e prosecuzione allo stato 72

    bool-op  prosecuzione allo stato 74


Stato 70

   52 expr: expr . bool-op bool-term
   73 factor: '(' expr . ')'

    AND  shift e prosecuzione allo stato 71
    OR   shift e prosecuzione allo stato 72
    ')'  shift e prosecuzione allo stato 93

    bool-op  prosecuzione allo stato 74


Stato 71

   54 bool-op: AND .

    $default  riduzione con la regola 54 (bool-op)


Stato 72

   55 bool-op: OR .

    $default  riduzione con la regola 55 (bool-op)


Stato 73

   23 const-decl: decl '=' expr ';' .

    $default  riduzione con la regola 23 (const-decl)


Stato 74

   52 expr: expr bool-op . bool-term

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    bool-term    prosecuzione allo stato 94
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 75

   66 low-bin-op: PLUS .

    $default  riduzione con la regola 66 (low-bin-op)


Stato 76

   67 low-bin-op: MINUS .

    $default  riduzione con la regola 67 (low-bin-op)


Stato 77

   58 rel-op: EQ .

    $default  riduzione con la regola 58 (rel-op)


Stato 78

   59 rel-op: NEQ .

    $default  riduzione con la regola 59 (rel-op)


Stato 79

   63 rel-op: GE .

    $default  riduzione con la regola 63 (rel-op)


Stato 80

   62 rel-op: GT .

    $default  riduzione con la regola 62 (rel-op)


Stato 81

   61 rel-op: LE .

    $default  riduzione con la regola 61 (rel-op)


Stato 82

   60 rel-op: LT .

    $default  riduzione con la regola 60 (rel-op)


Stato 83

   56 bool-term: rel-term rel-op . rel-term

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    rel-term     prosecuzione allo stato 95
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 84

   64 rel-term: rel-term low-bin-op . low-term

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    low-term     prosecuzione allo stato 96
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 85

   70 high-bin-op: MULT .

    $default  riduzione con la regola 70 (high-bin-op)


Stato 86

   71 high-bin-op: DIV .

    $default  riduzione con la regola 71 (high-bin-op)


Stato 87

   68 low-term: low-term high-bin-op . factor

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    factor       prosecuzione allo stato 97
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 88

   72 factor: unary-op factor .

    $default  riduzione con la regola 72 (factor)


Stato 89

   27 module-body: START ID @5 . stat-list END ID

    ID      shift e prosecuzione allo stato 98
    IF      shift e prosecuzione allo stato 99
    WHILE   shift e prosecuzione allo stato 100
    RETURN  shift e prosecuzione allo stato 101
    READ    shift e prosecuzione allo stato 102
    WRITE   shift e prosecuzione allo stato 103

    stat-list    prosecuzione allo stato 104
    stat         prosecuzione allo stato 105
    assign-stat  prosecuzione allo stato 106
    if-stat      prosecuzione allo stato 107
    while-stat   prosecuzione allo stato 108
    return-stat  prosecuzione allo stato 109
    read-stat    prosecuzione allo stato 110
    write-stat   prosecuzione allo stato 111
    module-call  prosecuzione allo stato 112


Stato 90

   88 module-call: ID @8 '(' . opt-expr-list ')'

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    $default  riduzione con la regola 90 (opt-expr-list)

    expr-list      prosecuzione allo stato 113
    expr           prosecuzione allo stato 114
    bool-term      prosecuzione allo stato 58
    rel-term       prosecuzione allo stato 59
    low-term       prosecuzione allo stato 60
    factor         prosecuzione allo stato 61
    unary-op       prosecuzione allo stato 62
    constant       prosecuzione allo stato 63
    module-call    prosecuzione allo stato 64
    opt-expr-list  prosecuzione allo stato 115
    cond-expr      prosecuzione allo stato 65


Stato 91

   79 factor: TYPE @7 '(' . expr ')'

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 116
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 92

   91 cond-expr: IF expr THEN . expr opt-elsif-expr-list ELSE expr END

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 117
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 93

   73 factor: '(' expr ')' .

    $default  riduzione con la regola 73 (factor)


Stato 94

   52 expr: expr bool-op bool-term .

    $default  riduzione con la regola 52 (expr)


Stato 95

   56 bool-term: rel-term rel-op rel-term .
   64 rel-term: rel-term . low-bin-op low-term

    PLUS   shift e prosecuzione allo stato 75
    MINUS  shift e prosecuzione allo stato 76

    $default  riduzione con la regola 56 (bool-term)

    low-bin-op  prosecuzione allo stato 84


Stato 96

   64 rel-term: rel-term low-bin-op low-term .
   68 low-term: low-term . high-bin-op factor

    MULT  shift e prosecuzione allo stato 85
    DIV   shift e prosecuzione allo stato 86

    $default  riduzione con la regola 64 (rel-term)

    high-bin-op  prosecuzione allo stato 87


Stato 97

   68 low-term: low-term high-bin-op factor .

    $default  riduzione con la regola 68 (low-term)


Stato 98

   38 assign-stat: ID . @6 '=' expr
   88 module-call: ID . @8 '(' opt-expr-list ')'

    '('       riduzione con la regola 87 (@8)
    $default  riduzione con la regola 37 (@6)

    @6  prosecuzione allo stato 118
    @8  prosecuzione allo stato 67


Stato 99

   39 if-stat: IF . expr THEN stat-list opt-elsif-stat-list opt-else-stat END

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 119
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 100

   44 while-stat: WHILE . expr DO stat-list END

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 120
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 101

   45 return-stat: RETURN . opt-expr

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    $default  riduzione con la regola 47 (opt-expr)

    opt-expr     prosecuzione allo stato 121
    expr         prosecuzione allo stato 122
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 102

   48 read-stat: READ . '(' id-list ')'

    '('  shift e prosecuzione allo stato 123


Stato 103

   49 write-stat: WRITE . '(' expr-list ')'

    '('  shift e prosecuzione allo stato 124


Stato 104

   27 module-body: START ID @5 stat-list . END ID

    END  shift e prosecuzione allo stato 125


Stato 105

   28 stat-list: stat . ';' stat-list
   29          | stat . ';'

    ';'  shift e prosecuzione allo stato 126


Stato 106

   30 stat: assign-stat .

    $default  riduzione con la regola 30 (stat)


Stato 107

   31 stat: if-stat .

    $default  riduzione con la regola 31 (stat)


Stato 108

   32 stat: while-stat .

    $default  riduzione con la regola 32 (stat)


Stato 109

   33 stat: return-stat .

    $default  riduzione con la regola 33 (stat)


Stato 110

   34 stat: read-stat .

    $default  riduzione con la regola 34 (stat)


Stato 111

   35 stat: write-stat .

    $default  riduzione con la regola 35 (stat)


Stato 112

   36 stat: module-call .

    $default  riduzione con la regola 36 (stat)


Stato 113

   89 opt-expr-list: expr-list .

    $default  riduzione con la regola 89 (opt-expr-list)


Stato 114

   50 expr-list: expr . ',' expr-list
   51          | expr .
   52 expr: expr . bool-op bool-term

    AND  shift e prosecuzione allo stato 71
    OR   shift e prosecuzione allo stato 72
    ','  shift e prosecuzione allo stato 127

    $default  riduzione con la regola 51 (expr-list)

    bool-op  prosecuzione allo stato 74


Stato 115

   88 module-call: ID @8 '(' opt-expr-list . ')'

    ')'  shift e prosecuzione allo stato 128


Stato 116

   52 expr: expr . bool-op bool-term
   79 factor: TYPE @7 '(' expr . ')'

    AND  shift e prosecuzione allo stato 71
    OR   shift e prosecuzione allo stato 72
    ')'  shift e prosecuzione allo stato 129

    bool-op  prosecuzione allo stato 74


Stato 117

   52 expr: expr . bool-op bool-term
   91 cond-expr: IF expr THEN expr . opt-elsif-expr-list ELSE expr END

    ELSIF  shift e prosecuzione allo stato 130
    AND    shift e prosecuzione allo stato 71
    OR     shift e prosecuzione allo stato 72

    $default  riduzione con la regola 93 (opt-elsif-expr-list)

    bool-op              prosecuzione allo stato 74
    opt-elsif-expr-list  prosecuzione allo stato 131


Stato 118

   38 assign-stat: ID @6 . '=' expr

    '='  shift e prosecuzione allo stato 132


Stato 119

   39 if-stat: IF expr . THEN stat-list opt-elsif-stat-list opt-else-stat END
   52 expr: expr . bool-op bool-term

    THEN  shift e prosecuzione allo stato 133
    AND   shift e prosecuzione allo stato 71
    OR    shift e prosecuzione allo stato 72

    bool-op  prosecuzione allo stato 74


Stato 120

   44 while-stat: WHILE expr . DO stat-list END
   52 expr: expr . bool-op bool-term

    DO   shift e prosecuzione allo stato 134
    AND  shift e prosecuzione allo stato 71
    OR   shift e prosecuzione allo stato 72

    bool-op  prosecuzione allo stato 74


Stato 121

   45 return-stat: RETURN opt-expr .

    $default  riduzione con la regola 45 (return-stat)


Stato 122

   46 opt-expr: expr .
   52 expr: expr . bool-op bool-term

    AND  shift e prosecuzione allo stato 71
    OR   shift e prosecuzione allo stato 72

    $default  riduzione con la regola 46 (opt-expr)

    bool-op  prosecuzione allo stato 74


Stato 123

   48 read-stat: READ '(' . id-list ')'

    ID  shift e prosecuzione allo stato 23

    id-list  prosecuzione allo stato 135


Stato 124

   49 write-stat: WRITE '(' . expr-list ')'

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr-list    prosecuzione allo stato 136
    expr         prosecuzione allo stato 114
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 125

   27 module-body: START ID @5 stat-list END . ID

    ID  shift e prosecuzione allo stato 137


Stato 126

   28 stat-list: stat ';' . stat-list
   29          | stat ';' .

    ID      shift e prosecuzione allo stato 98
    IF      shift e prosecuzione allo stato 99
    WHILE   shift e prosecuzione allo stato 100
    RETURN  shift e prosecuzione allo stato 101
    READ    shift e prosecuzione allo stato 102
    WRITE   shift e prosecuzione allo stato 103

    $default  riduzione con la regola 29 (stat-list)

    stat-list    prosecuzione allo stato 138
    stat         prosecuzione allo stato 105
    assign-stat  prosecuzione allo stato 106
    if-stat      prosecuzione allo stato 107
    while-stat   prosecuzione allo stato 108
    return-stat  prosecuzione allo stato 109
    read-stat    prosecuzione allo stato 110
    write-stat   prosecuzione allo stato 111
    module-call  prosecuzione allo stato 112


Stato 127

   50 expr-list: expr ',' . expr-list

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr-list    prosecuzione allo stato 139
    expr         prosecuzione allo stato 114
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 128

   88 module-call: ID @8 '(' opt-expr-list ')' .

    $default  riduzione con la regola 88 (module-call)


Stato 129

   79 factor: TYPE @7 '(' expr ')' .

    $default  riduzione con la regola 79 (factor)


Stato 130

   92 opt-elsif-expr-list: ELSIF . expr THEN expr opt-elsif-expr-list

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 140
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 131

   91 cond-expr: IF expr THEN expr opt-elsif-expr-list . ELSE expr END

    ELSE  shift e prosecuzione allo stato 141


Stato 132

   38 assign-stat: ID @6 '=' . expr

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 142
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 133

   39 if-stat: IF expr THEN . stat-list opt-elsif-stat-list opt-else-stat END

    ID      shift e prosecuzione allo stato 98
    IF      shift e prosecuzione allo stato 99
    WHILE   shift e prosecuzione allo stato 100
    RETURN  shift e prosecuzione allo stato 101
    READ    shift e prosecuzione allo stato 102
    WRITE   shift e prosecuzione allo stato 103

    stat-list    prosecuzione allo stato 143
    stat         prosecuzione allo stato 105
    assign-stat  prosecuzione allo stato 106
    if-stat      prosecuzione allo stato 107
    while-stat   prosecuzione allo stato 108
    return-stat  prosecuzione allo stato 109
    read-stat    prosecuzione allo stato 110
    write-stat   prosecuzione allo stato 111
    module-call  prosecuzione allo stato 112


Stato 134

   44 while-stat: WHILE expr DO . stat-list END

    ID      shift e prosecuzione allo stato 98
    IF      shift e prosecuzione allo stato 99
    WHILE   shift e prosecuzione allo stato 100
    RETURN  shift e prosecuzione allo stato 101
    READ    shift e prosecuzione allo stato 102
    WRITE   shift e prosecuzione allo stato 103

    stat-list    prosecuzione allo stato 144
    stat         prosecuzione allo stato 105
    assign-stat  prosecuzione allo stato 106
    if-stat      prosecuzione allo stato 107
    while-stat   prosecuzione allo stato 108
    return-stat  prosecuzione allo stato 109
    read-stat    prosecuzione allo stato 110
    write-stat   prosecuzione allo stato 111
    module-call  prosecuzione allo stato 112


Stato 135

   48 read-stat: READ '(' id-list . ')'

    ')'  shift e prosecuzione allo stato 145


Stato 136

   49 write-stat: WRITE '(' expr-list . ')'

    ')'  shift e prosecuzione allo stato 146


Stato 137

   27 module-body: START ID @5 stat-list END ID .

    $default  riduzione con la regola 27 (module-body)


Stato 138

   28 stat-list: stat ';' stat-list .

    $default  riduzione con la regola 28 (stat-list)


Stato 139

   50 expr-list: expr ',' expr-list .

    $default  riduzione con la regola 50 (expr-list)


Stato 140

   52 expr: expr . bool-op bool-term
   92 opt-elsif-expr-list: ELSIF expr . THEN expr opt-elsif-expr-list

    THEN  shift e prosecuzione allo stato 147
    AND   shift e prosecuzione allo stato 71
    OR    shift e prosecuzione allo stato 72

    bool-op  prosecuzione allo stato 74


Stato 141

   91 cond-expr: IF expr THEN expr opt-elsif-expr-list ELSE . expr END

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 148
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 142

   38 assign-stat: ID @6 '=' expr .
   52 expr: expr . bool-op bool-term

    AND  shift e prosecuzione allo stato 71
    OR   shift e prosecuzione allo stato 72

    $default  riduzione con la regola 38 (assign-stat)

    bool-op  prosecuzione allo stato 74


Stato 143

   39 if-stat: IF expr THEN stat-list . opt-elsif-stat-list opt-else-stat END

    ELSIF  shift e prosecuzione allo stato 149

    $default  riduzione con la regola 41 (opt-elsif-stat-list)

    opt-elsif-stat-list  prosecuzione allo stato 150


Stato 144

   44 while-stat: WHILE expr DO stat-list . END

    END  shift e prosecuzione allo stato 151


Stato 145

   48 read-stat: READ '(' id-list ')' .

    $default  riduzione con la regola 48 (read-stat)


Stato 146

   49 write-stat: WRITE '(' expr-list ')' .

    $default  riduzione con la regola 49 (write-stat)


Stato 147

   92 opt-elsif-expr-list: ELSIF expr THEN . expr opt-elsif-expr-list

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 152
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 148

   52 expr: expr . bool-op bool-term
   91 cond-expr: IF expr THEN expr opt-elsif-expr-list ELSE expr . END

    END  shift e prosecuzione allo stato 153
    AND  shift e prosecuzione allo stato 71
    OR   shift e prosecuzione allo stato 72

    bool-op  prosecuzione allo stato 74


Stato 149

   40 opt-elsif-stat-list: ELSIF . expr THEN stat-list opt-elsif-stat-list

    ID         shift e prosecuzione allo stato 46
    TYPE       shift e prosecuzione allo stato 47
    IF         shift e prosecuzione allo stato 48
    MINUS      shift e prosecuzione allo stato 49
    NOT        shift e prosecuzione allo stato 50
    INTCONST   shift e prosecuzione allo stato 51
    REALCONST  shift e prosecuzione allo stato 52
    CHARCONST  shift e prosecuzione allo stato 53
    STRCONST   shift e prosecuzione allo stato 54
    BOOLCONST  shift e prosecuzione allo stato 55
    '('        shift e prosecuzione allo stato 56

    expr         prosecuzione allo stato 154
    bool-term    prosecuzione allo stato 58
    rel-term     prosecuzione allo stato 59
    low-term     prosecuzione allo stato 60
    factor       prosecuzione allo stato 61
    unary-op     prosecuzione allo stato 62
    constant     prosecuzione allo stato 63
    module-call  prosecuzione allo stato 64
    cond-expr    prosecuzione allo stato 65


Stato 150

   39 if-stat: IF expr THEN stat-list opt-elsif-stat-list . opt-else-stat END

    ELSE  shift e prosecuzione allo stato 155

    $default  riduzione con la regola 43 (opt-else-stat)

    opt-else-stat  prosecuzione allo stato 156


Stato 151

   44 while-stat: WHILE expr DO stat-list END .

    $default  riduzione con la regola 44 (while-stat)


Stato 152

   52 expr: expr . bool-op bool-term
   92 opt-elsif-expr-list: ELSIF expr THEN expr . opt-elsif-expr-list

    ELSIF  shift e prosecuzione allo stato 130
    AND    shift e prosecuzione allo stato 71
    OR     shift e prosecuzione allo stato 72

    $default  riduzione con la regola 93 (opt-elsif-expr-list)

    bool-op              prosecuzione allo stato 74
    opt-elsif-expr-list  prosecuzione allo stato 157


Stato 153

   91 cond-expr: IF expr THEN expr opt-elsif-expr-list ELSE expr END .

    $default  riduzione con la regola 91 (cond-expr)


Stato 154

   40 opt-elsif-stat-list: ELSIF expr . THEN stat-list opt-elsif-stat-list
   52 expr: expr . bool-op bool-term

    THEN  shift e prosecuzione allo stato 158
    AND   shift e prosecuzione allo stato 71
    OR    shift e prosecuzione allo stato 72

    bool-op  prosecuzione allo stato 74


Stato 155

   42 opt-else-stat: ELSE . stat-list

    ID      shift e prosecuzione allo stato 98
    IF      shift e prosecuzione allo stato 99
    WHILE   shift e prosecuzione allo stato 100
    RETURN  shift e prosecuzione allo stato 101
    READ    shift e prosecuzione allo stato 102
    WRITE   shift e prosecuzione allo stato 103

    stat-list    prosecuzione allo stato 159
    stat         prosecuzione allo stato 105
    assign-stat  prosecuzione allo stato 106
    if-stat      prosecuzione allo stato 107
    while-stat   prosecuzione allo stato 108
    return-stat  prosecuzione allo stato 109
    read-stat    prosecuzione allo stato 110
    write-stat   prosecuzione allo stato 111
    module-call  prosecuzione allo stato 112


Stato 156

   39 if-stat: IF expr THEN stat-list opt-elsif-stat-list opt-else-stat . END

    END  shift e prosecuzione allo stato 160


Stato 157

   92 opt-elsif-expr-list: ELSIF expr THEN expr opt-elsif-expr-list .

    $default  riduzione con la regola 92 (opt-elsif-expr-list)


Stato 158

   40 opt-elsif-stat-list: ELSIF expr THEN . stat-list opt-elsif-stat-list

    ID      shift e prosecuzione allo stato 98
    IF      shift e prosecuzione allo stato 99
    WHILE   shift e prosecuzione allo stato 100
    RETURN  shift e prosecuzione allo stato 101
    READ    shift e prosecuzione allo stato 102
    WRITE   shift e prosecuzione allo stato 103

    stat-list    prosecuzione allo stato 161
    stat         prosecuzione allo stato 105
    assign-stat  prosecuzione allo stato 106
    if-stat      prosecuzione allo stato 107
    while-stat   prosecuzione allo stato 108
    return-stat  prosecuzione allo stato 109
    read-stat    prosecuzione allo stato 110
    write-stat   prosecuzione allo stato 111
    module-call  prosecuzione allo stato 112


Stato 159

   42 opt-else-stat: ELSE stat-list .

    $default  riduzione con la regola 42 (opt-else-stat)


Stato 160

   39 if-stat: IF expr THEN stat-list opt-elsif-stat-list opt-else-stat END .

    $default  riduzione con la regola 39 (if-stat)


Stato 161

   40 opt-elsif-stat-list: ELSIF expr THEN stat-list . opt-elsif-stat-list

    ELSIF  shift e prosecuzione allo stato 149

    $default  riduzione con la regola 41 (opt-elsif-stat-list)

    opt-elsif-stat-list  prosecuzione allo stato 162


Stato 162

   40 opt-elsif-stat-list: ELSIF expr THEN stat-list opt-elsif-stat-list .

    $default  riduzione con la regola 40 (opt-elsif-stat-list)
